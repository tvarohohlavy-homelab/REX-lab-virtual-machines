name: Day0 | Create pihole01/02 VMs

on:
  workflow_dispatch:
    inputs:
      createMirror:
        description: 'Create local terraform mirror files'
        required: true
        default: false
        type: boolean
      skipTerraform:
        description: 'Skip creating or updating the VM'
        required: true
        default: false
        type: boolean

env:
  # VM_NAME: <defined via matrix strategy for each job>
  VM_FOLDER: ${{ vars.VCENTER_VM_INFRA_FOLDER }}
  # VM_IP_ADDRESS: <defined via matrix strategy for each job>

jobs:
  create-opentofu-providers-mirror:
    if: ${{ inputs.createMirror }}
    runs-on: [self-hosted, linux, initial, rexonix-infra]
    container: ghcr.io/opentofu/opentofu:1.9.0
    steps:
      - uses: Anush008/clean-after-action@v4.2.0

      - uses: actions/checkout@v4

      - name: Create providers mirror
        run: |
          echo "[started] Creating mirror"
          cd terraform
          rm -rf ./mirror
          mkdir -p ./mirror
          tofu providers mirror ./mirror || tofu providers mirror ./mirror
          echo "[done] Creating mirror"
    
      - name: Workaround for git
        run: git config --global --add safe.directory '*'

      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          file_pattern: 'terraform/mirror/*'
          commit_message: Automatic changes | OpenTofu Providers Mirror

  create-vm-from-template:
    if: ${{ !inputs.skipTerraform && !failure() && !cancelled() }}
    needs: [create-opentofu-providers-mirror]
    runs-on: [self-hosted, linux, initial, rexonix-infra]
    container: ghcr.io/opentofu/opentofu:1.9.0
    strategy:
      max-parallel: 1
      matrix:
        include:
          - vm_name: pihole01
            vm_ip_address: ${{ vars.DNS_SERVER_IPV4_LAB_PRIMARY }}
          - vm_name: pihole02
            vm_ip_address: ${{ vars.DNS_SERVER_IPV4_LAB_SECONDARY }}
    steps:
      - uses: Anush008/clean-after-action@v4.2.0

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set variables in main.tf
        uses: tvarohohlavy/inplace-envsubst-action@v1.0.0
        env:
          STATEFILE_PATH:  "${{ matrix.vm_name }}-terraform.tfstate"
          TF_ENCRYPTION_KEY: ${{ secrets.TF_ENCRYPTION_PASSWORD }}
        with:
          variables: |
            $STATEFILE_PATH
            $TF_ENCRYPTION_KEY
          files: |
            terraform/main.tf

      - name: Save statefile from secret to file
        env:
          STATEFILE: ${{ secrets[format('{0}_TF_STATEFILE', matrix.vm_name)] }}
        if: env.STATEFILE && env.STATEFILE != 'empty'
        run: echo '${{ env.STATEFILE }}' > terraform/${{ matrix.vm_name }}-terraform.tfstate

      - name: Create VM from template with OpenTofu
        id: create-vm
        working-directory: terraform
        run: |
          # init, plan, apply
          tofu init --plugin-dir ./mirror
          tofu plan -out "tfplan" | tee tfplan.log
          tofu apply -auto-approve "tfplan"
          # save tfplan to output for later use
          echo "TFPLAN<<EOF" >> $GITHUB_OUTPUT
          echo "$(cat tfplan.log)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          TF_LOG: "ERROR"
          # vCenter
          TF_VAR_vCenterServer: ${{ secrets.VCENTER_HOST }}
          TF_VAR_vCenterUsername: ${{ secrets.VCENTER_USER }}
          TF_VAR_vCenterPassword: ${{ secrets.VCENTER_PASS }}
          TF_VAR_vCenterInsecureConnection: ${{ secrets.VCENTER_INSECURE_CONNECTION }}
          TF_VAR_vCenterDatacenterName: ${{ vars.VCENTER_DATACENTER_NAME }}
          TF_VAR_clusterName: ${{ vars.VCENTER_CLUSTER_NAME }}
          TF_VAR_datastoreName: ${{ vars.VCENTER_DATASTORE_NAME }}
          # ubuntu 22.04 server x64
          TF_VAR_templateName: ${{ vars.UBUNTU_22_04_SERVER_X64_VM_TEMPLATE_NAME }}
          TF_VAR_libraryName: ${{ vars.VCENTER_PACKER_CONTENT_LIBRARY_NAME }}
          # specific to the VM
          TF_VAR_vmName: ${{ matrix.vm_name }}
          TF_VAR_vmFolder: ${{ env.VM_FOLDER }}
          # network
          TF_VAR_portGroup: ${{ vars.VCENTER_DEFAULT_PORT_GROUP }}
          TF_VAR_vmIPAddresses: "[\"${{ matrix.vm_ip_address }}\"]"
          TF_VAR_vmIPNetmask: ${{ vars.VCENTER_DEFAULT_PORT_GROUP_NETMASK }}
          TF_VAR_vmIPGateway: ${{ vars.VCENTER_DEFAULT_PORT_GROUP_GATEWAY }}
          TF_VAR_dnsServerList: "[\"${{ vars.DNS_SERVER_IPV4_PUBLIC_PRIMARY }}\",\"${{ vars.DNS_SERVER_IPV4_PUBLIC_SECONDARY }}\"]"
          TF_VAR_vmDomain: ${{ vars.VM_DOMAIN_NAME_LAB }}
          # access
          TF_VAR_vmUsername: ${{ secrets.VM_USERNAME }}
          TF_VAR_vmPassword: ${{ secrets.VM_PASSWORD }}
          TF_VAR_authorizedSshKeys: "[\"${{ secrets.JT_SSH_PUBLIC_KEY }}\",\"${{ secrets.RUNNER01_SSH_PUBLIC_KEY }}\"]"

      - name: Read statefile
        id: read-statefile
        run: |
          statefile=$(cat terraform/${{ matrix.vm_name }}-terraform.tfstate)
          echo "::add-mask::$statefile"
          echo "statefile=$statefile" >> $GITHUB_OUTPUT
  
      - name: Save statefile into secret if changed
        if: ${{ ! contains(steps.create-vm.outputs.TFPLAN, 'found no differences, so no changes are needed') }}  
        uses: action-pack/set-secret@v1
        with:
          name: '${{ matrix.vm_name }}_TF_STATEFILE'
          value: ${{ steps.read-statefile.outputs.statefile }}
          token: ${{ secrets.REPO_SECRETS_PAT }}

  install-pihole:
    if: ${{ !failure() && !cancelled() }}
    needs: [create-vm-from-template]
    runs-on: [self-hosted, linux, initial, rexonix-infra]
    strategy:
      matrix:
        include:
          - vm_name: pihole01
            vm_ip_address: ${{ vars.DNS_SERVER_IPV4_LAB_PRIMARY }}
            files_path: pihole
            pihole_peer_ip: ${{ vars.DNS_SERVER_IPV4_LAB_SECONDARY }}
            pihole_peer_hostname: pihole02
            keepalived_state: MASTER
            keepalived_priority: 10
          - vm_name: pihole02
            vm_ip_address: ${{ vars.DNS_SERVER_IPV4_LAB_SECONDARY }}
            files_path: pihole
            pihole_peer_ip: ${{ vars.DNS_SERVER_IPV4_LAB_PRIMARY }}
            pihole_peer_hostname: pihole01
            keepalived_state: BACKUP
            keepalived_priority: 9
    steps:
      - uses: Anush008/clean-after-action@v4.2.0

      - uses: actions/checkout@v4

      - name: Create Pihole admin password hash
        run: |
          PIHOLE_PASSWORD_HASH=$(echo -n '${{ secrets.VM_PASSWORD }}' | sha256sum | awk '{printf "%s",$1 }' | sha256sum | awk '{printf "%s",$1 }')
          echo "::add-mask::$PIHOLE_PASSWORD_HASH"
          echo "PIHOLE_PASSWORD_HASH=$PIHOLE_PASSWORD_HASH" >> $GITHUB_ENV

      - name: Set variables in configuration files
        uses: tvarohohlavy/inplace-envsubst-action@v1.0.0
        env:
          PIHOLE_PASSWORD_HASH: ${{ env.PIHOLE_PASSWORD_HASH }}
          PIHOLE_DOMAIN_NAME: ${{ vars.VM_DOMAIN_NAME_LAB }}
          PIHOLE_DNS_1: ${{ vars.DNS_SERVER_IPV4_PUBLIC_PRIMARY }}
          PIHOLE_DNS_2: ${{ vars.DNS_SERVER_IPV4_PUBLIC_SECONDARY }}
          PIHOLE_DNS_3: ${{ vars.DNS_SERVER_IPV6_PUBLIC_PRIMARY }}
          PIHOLE_DNS_4: ${{ vars.DNS_SERVER_IPV6_PUBLIC_SECONDARY }}
          KEEPALIVED_STATE: ${{ matrix.keepalived_state }}
          KEEPALIVED_INTERFACE: ens192
          KEEPALIVED_VRID: 45
          KEEPALIVED_PRIORITY: ${{ matrix.keepalived_priority }}
          KEEPALIVED_LOCAL_IP: ${{ matrix.vm_ip_address }}
          KEEPALIVED_PEER_IP: ${{ matrix.pihole_peer_ip }}
          KEEPALIVED_PASSWORD: S3cr3tP@ssw0rd
          KEEPALIVED_VIRTUAL_IP: ${{ vars.DNS_SERVER_IPV4_LAB_VIP }}
          KEEPALIVED_CIDR: ${{ vars.VCENTER_DEFAULT_PORT_GROUP_NETMASK }}
        with:
          variables: |
            $PIHOLE_PASSWORD_HASH
            $PIHOLE_DOMAIN_NAME
            $PIHOLE_DNS_1
            $PIHOLE_DNS_2
            $PIHOLE_DNS_3
            $PIHOLE_DNS_4
            $KEEPALIVED_STATE
            $KEEPALIVED_INTERFACE
            $KEEPALIVED_VRID
            $KEEPALIVED_PRIORITY
            $KEEPALIVED_LOCAL_IP
            $KEEPALIVED_PEER_IP
            $KEEPALIVED_PASSWORD
            $KEEPALIVED_VIRTUAL_IP
            $KEEPALIVED_CIDR
          files: |
            ${{ matrix.files_path }}/etc/pihole/setupVars.conf
            ${{ matrix.files_path }}/etc/keepalived/keepalived.conf

      - name: Copy files to VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ matrix.vm_ip_address }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.RUNNER01_SSH_PRIVATE_KEY }}
          source: "${{ matrix.files_path }}/etc/pihole/setupVars.conf,${{ matrix.files_path }}/etc/keepalived/keepalived.conf,${{ matrix.files_path }}/etc/pihole/custom.list.tsv"
          target: "/home/${{ secrets.VM_USERNAME }}"
          strip_components: 3

      - name: Install and Configure Pihole
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ matrix.vm_ip_address }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.RUNNER01_SSH_PRIVATE_KEY }}
          script: |
            # Disable Interactive mode for Service restarts
            echo "\$nrconf{restart} = 'a';" | sudo tee /etc/needrestart/conf.d/mynrconf.conf
            # Install Keepalived
            sudo apt update && sudo apt install -y keepalived
            sudo mv /home/${{ secrets.VM_USERNAME }}/keepalived.conf /etc/keepalived/keepalived.conf
            sudo systemctl enable keepalived
            sudo systemctl start keepalived
            sudo systemctl status keepalived
            #
            # Make sure /etc/pihole exists
            sudo mkdir -p /etc/pihole
            # Move setupVars.conf for Pihole
            sudo mv /home/${{ secrets.VM_USERNAME }}/setupVars.conf /etc/pihole/setupVars.conf
            # Update /etc/pihole/custom.list
            sed -i '/^#/d' /home/${{ secrets.VM_USERNAME }}/custom.list.tsv
            sed -i 's/\t/ /g' /home/${{ secrets.VM_USERNAME }}/custom.list.tsv
            sudo mv /home/${{ secrets.VM_USERNAME }}/custom.list.tsv /etc/pihole/custom.list
            # Update /etc/hosts
            sudo tee /etc/hosts >/dev/null <<-EOF
            	127.0.0.1       localhost
            	::1             localhost ip6-localhost ip6-loopback
            	fe00::0         ip6-localnet
            	ff00::0         ip6-mcastprefix
            	ff02::1         ip6-allnodes
            	ff02::2         ip6-allrouters
            	127.0.1.1       ${{ matrix.vm_name }}.${{ vars.VM_DOMAIN_NAME_LAB }} ${{ matrix.vm_name }}
            	${{ matrix.pihole_peer_ip }}      ${{ matrix.pihole_peer_hostname }}.${{ vars.VM_DOMAIN_NAME_LAB }} ${{ matrix.pihole_peer_hostname }}
              ${{ vars.DNS_SERVER_IPV4_LAB_VIP }}      pihole.${{ vars.VM_DOMAIN_NAME_LAB }} pihole
            EOF
            # Install or Restart Pihole
            if [ ! -f /usr/local/bin/pihole ]; then
              echo "Pihole is not installed. Installing Pihole..."
              git clone --depth 1 --branch v5.18.4 https://github.com/pi-hole/pi-hole.git PIHOLE_INSTALLER
              cd "PIHOLE_INSTALLER/automated install/"
              sudo bash basic-install.sh --unattended
              cd ../..
            	# curl -sSL https://install.pi-hole.net | sudo bash /dev/stdin --unattended
            else
              echo "Pihole is already installed. Restarting Pihole..."
              sudo pihole restartdns
            fi
            sudo systemctl status pihole-FTL.service
            sleep 60
            # Reconfigure Lighttpd to redirect / to /admin
            LINE='url.redirect = ("^/$" => "/admin" )'
            FILE='/etc/lighttpd/lighttpd.conf'
            grep -qF "$LINE" "$FILE" || (echo "$LINE" | sudo tee -a $FILE)  && sudo systemctl restart lighttpd
            sudo systemctl status lighttpd
